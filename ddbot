#!/usr/bin/env bash

### BEGIN 00-functions.sh ###
app_name="$0"
app_ver="dev"

default_cfg="./ddbot.cfg"

function confirmY() {
  local answer
  echo -ne "$* (Y/n) "
  read answer
  case ${answer,,} in
    n|no)
      return 1
      ;;
    *)
      return 0
      ;;
  esac
}

function confirmN() {
  local answer
  echo -ne "$* (y/N) "
  read answer
  case ${answer,,} in
    y|yes)
      return 0
      ;;
    *)
      return 1
      ;;
  esac
}

function notify() {
  local prompt=$1
  shift
  local color=$1
  shift
  echo -e "[\e[${color}m ${prompt} \e[0m] $*"
}

function info() {
  notify "INFO" "1;34" "$*"
}

function error() {
  notify "ERROR" "0;31" "$*"
}

function errorAndExit() {
  local exit_code=$1
  shift
  error "$*"
  exit $exit_code
}

function warn() {
  notify "WARN" "0;33" "$*"
}

function debug() {
  notify "DEBUG" "0;37" "$*"
}

function usage() {
  echo "Usage:"
  echo " $app_name [OPTIONS]"
  echo
  echo "Configuration file is needed."
  echo "Run without configuration file will generate new configuration file"
  echo
  echo "Options:"
  echo "  -c, --config string   Path of configuration file (Default is $default_cfg)"
  echo "      --debug           Enable debug mode"
  echo "  -h, --help            Print help"
}

function writecfg() {
  echo "$*" >> $CFG
}
function gen_cfg() {
  echo "# Generated by $app_name" > $CFG
  writecfg
  writecfg "NET_IP=${NET_IP}"
  writecfg "NET_MASK=${NET_MASK}"
  writecfg "NET_MASK_NUM=${NET_MASK_NUM}"
  writecfg "NET_GATEWAY=${NET_GATEWAY}"
  writecfg "NET_DNS=(${NET_DNS:-8.8.8.8})"
  writecfg
  writecfg "# Write networkd config after dd"
  writecfg "WRITE_NETWORKD="
  writecfg
  writecfg "SYS_DISK=${SYS_DISK}"
  writecfg
  writecfg "# TODO: fill this"
  writecfg "IMAGE_URL="
  writecfg
  writecfg "# Scale root partition after dd"
  writecfg "# Value is format of your root partition"
  writecfg "# For now only support btrfs. PR is welcomed."
  writecfg "#SCALE_PARTITION=btrfs"
  writecfg
  writecfg "MOUNT_OPTIONS=mount.btrfs -o subvol=xxx"
  writecfg "NETWORKD_DIR=/etc/systemd/networkd/"
  writecfg
  writecfg "# We recommend to use Debian 11 or higher."
  writecfg "# For other debian-based distributions, we cannot ensure it works."
  writecfg "# !! Non-debian-based distributions are not supported!"
  writecfg "# If you insist, set IGNORE_DISTRO to 1"
  writecfg "IGNORE_DISTRO="
  writecfg
  writecfg "# We recommend to use x86_64."
  writecfg "# For other architecture, we cannot ensure it works."
  writecfg "# If you insist, set IGNORE_ARCH to 1"
  writecfg "IGNORE_ARCH="
}

function parse_cfg() {
  . $CFG
  [[ $NET_IP ]] && [[ $NET_MASK ]] && [[ $NET_GATEWAY ]] && [[ $NET_DNS ]] && [[ $IMAGE_URL ]] && return
  errorAndExit 3 "Incomplete configuration."
}

function check_file() {
  local file=$1
  [[ -f $file ]] && return
  [[ -d $file ]] && errorAndExit 2 "$file is a directory. Please remove it and try again."
  return 1
}
### END 00-functions.sh ###

### BEGIN 01-args.sh ###
OPERATION=run
CFG=$default_cfg
CFG_UNFINISHED=1
NET_IP=
NET_MASK=
NET_MASK_NUM=
NET_GATEWAY=
NET_DNS=
NET_IFACE= # only used in gencfg
SYS_DISK=
IMAGE_URL=
SCALE_PARTITION=
MOUNT_OPTIONS=mount
NETWORKD_DIR=/etc/systemd/networkd/
IGNORE_DISTRO=
IGNORE_ARCH=

while [[ $# -ge 1 ]]; do
  case $1 in
    -h|-H|--help)
      shift
      echo
      usage
      exit 0
      ;;
    -c|--config)
      shift
      CFG=$1
      shift
      ;;
    --debug)
      shift
      DEBUG=1
      ;;
    *)
      echo -e "$app_name: Invaild option: $1"
      usage
      exit 1
      ;;
  esac
done

check_file $CFG || OPERATION=gencfg
### END 01-args.sh ###

### BEGIN 02-check.sh ###
[[ $EUID != 0 ]] && [[ $debug ]] && errorAndExit 1 "Please run as root!"

if [[ ! $IGNORE_DISTRO ]]; then
  distro_name=$(grep "^ID=" /etc/os-release | cut -d'=' -f2)
  distro_ver=$(grep "^VERSION_ID=" /etc/os-release | cut -d'=' -f2)

  if [[ $distro_name = "debian" ]] && [[ $distro_ver -ge 11 ]]; then
    :
  else
    warn "This system is not recommended for this script. Non-debian-based distributions are not supported!"
    confirmY "Are you sure you want to continue?" || exit 4
  fi
fi

if [[ ! $IGNORE_ARCH ]]; then
  arch=$(uname -m)

  if [[ $arch != "x86_64" ]]; then
    warn "This architecture is not x86_64."
    confirmN "Are you sure you want to continue?" || exit 4
  fi
fi
### END 02-check.sh ###

### BEGIN 10-gencfg.sh ###
function parseNetMask() {
  n="${1:-32}"
  b=""
  m=""
  for((i=0;i<32;i++)){
    [ $i -lt $n ] && b="${b}1" || b="${b}0"
  }
  for((i=0;i<4;i++)){
    s=`echo "$b"|cut -c$[$[$i*8]+1]-$[$[$i+1]*8]`
    [ "$m" == "" ] && m="$((2#${s}))" || m="${m}.$((2#${s}))"
  }
  echo "$m"
}

function getInterface(){
  interface=""
  Interfaces=`cat /proc/net/dev |grep ':' |cut -d':' -f1 |sed 's/\s//g' |grep -iv '^lo\|^sit\|^stf\|^gif\|^dummy\|^vmnet\|^vir\|^gre\|^ipip\|^ppp\|^bond\|^tun\|^tap\|^ip6gre\|^ip6tnl\|^teql\|^ocserv\|^vpn'`
  defaultRoute=`ip route show default |grep "^default"`
  for item in `echo "$Interfaces"`
    do
      [ -n "$item" ] || continue
      echo "$defaultRoute" |grep -q "$item"
      [ $? -eq 0 ] && interface="$item" && break
    done
  echo "$interface"
}

function getDNS() {
  [[ ! -f /etc/resolv.conf ]] && echo '8.8.8.8 8.8.4.4' && return
  
  NET_DNS=(`grep "nameserver" /etc/resolv.conf | cut -d' ' -f2`)
  echo ${NET_DNS[@]}
}

function getDisk(){
  disks=`lsblk | sed 's/[[:space:]]*$//g' |grep "disk$" |cut -d' ' -f1 |grep -v "fd[0-9]*\|sr[0-9]*" |head -n1`
  [ -n "$disks" ] || echo ""
  echo "$disks" |grep -q "/dev"
  [ $? -eq 0 ] && echo "$disks" || echo "/dev/$disks"
}

if [[ $OPERATION = "gencfg" ]]; then
  NET_IFACE=`getInterface`
  cidr=`ip addr show dev $NET_IFACE |grep "inet.*" |head -n1 |grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\/[0-9]\{1,2\}'`
  NET_IP=`echo ${cidr} |cut -d'/' -f1`
  NET_MASK_NUM=$(echo ${cidr} |cut -d'/' -f2)
  NET_MASK=`parseNetMask $NET_MASK_NUM`
  NET_GATEWAY=`ip route show default |grep "^default" |grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' |head -n1`
  NET_DNS=`getDNS`
  
  SYS_DISK=`getDisk`

  gen_cfg && exit || errorAndExit 10 "Unexpected error."
fi
### END 10-gencfg.sh ###

### BEGIN 21-download.sh ###
# https://mirrors.aliyun.com/debian/dists/bullseye/main/installer-amd64/current/images/netboot/debian-installer/amd64/initrd.gz
# https://deb.debian.org/debian/dists/bullseye/main/installer-amd64/current/images/netboot/debian-installer/amd64/initrd.gz
# http://$DISTMirror/dists/$DIST/main/installer-$VER/current/images/udeb.list
download_mirror=(
  https://deb.debian.org/debian/
  https://mirrors.aliyun.com/debian/
)

download_src=(
  dists/bullseye/main/installer-amd64/current/images/netboot/debian-installer/amd64/initrd.gz
  dists/bullseye/main/installer-amd64/current/images/netboot/debian-installer/amd64/linux
  dists/bullseye/main/installer-amd64/current/images/udeb.list
)

download_dst=(
  /tmp/initrd.img.gz
  /tmp/vmlinuz
  /tmp/udeb.list
)

for i in `seq 1 ${#download_src[@]}`; do
  wget -t 5 -cqO ${download_dst[$[i-i]]} ${download_mirror[0]}${download_src[$[i-1]]}
  [[ $? != 0 ]] && errorAndExit 6 "Failed to download ${download_dst[$(i-i)]}"
done
### END 21-download.sh ###

### BEGIN 22-setgrub.sh ###
function getGRUB() {
  ls /boot/grub/grub.cfg 2>/dev/null || errorAndExit 8 "Failed to get GRUB.cfg."

  # cat $GRUBDIR/$GRUBFILE |sed -n '1h;1!H;$g;s/\n/%%%%%%%/g;$p' |grep -om 1 'menuentry\ [^{]*{[^}]*}%%%%%%%' |sed 's/%%%%%%%/\n/g' > /tmp/grub.read
}

BOOT_UUID=`findmnt -n -o uuid -T /boot`

getGRUB
cat << EOF
menuentry 'Install' --id install {
	load_video
	insmod gzio
	insmod part_msdos
	insmod ext2
	search --no-floppy -fs-uuid --set=root ${BOOT_UUID}
	linux /boot/vmlinuz-dd net.ifnames=0 biosdevname=0
	initrd /boot/initrd-dd.img
}

set default=install
EOF >> /boot/grub/grub.cfg
### END 22-setgrub.sh ###

### BEGIN 23-preseed.sh ###
[[ -d /tmp/boot ]] && rm -rf /tmp/boot
mkdir -p /tmp/boot && cd /tmp/boot

gzip -d < /tmp/initrd.img.gz | cpio --extract --verbose --make-directories --no-absolute-filenames >> /dev/null 2>&1

case $SCALE_PARTITION
  btrfs)
    scaleScript=<< EOF
partx -u ${SYS_DISK}
btrfs filesystem resize max `ls ${SYS_DISK}* | tail -n1`
EOF
  ;;
  *)
  ;;
esac

cat > /tmp/boot/preseed.cfg << EOF
d-i debian-installer/locale string en_US.UTF-8
d-i debian-installer/country string US
d-i debian-installer/language string en

d-i console-setup/layoutcode string us

d-i keyboard-configuration/xkb-keymap string us

d-i netcfg/choose_interface select auto

d-i netcfg/disable_autoconfig boolean true
d-i netcfg/dhcp_failed note
d-i netcfg/dhcp_options select Configure network manually
d-i netcfg/get_ipaddress string $NET_IP
d-i netcfg/get_netmask string $NET_MASK
d-i netcfg/get_gateway string $NET_GATEWAY
d-i netcfg/get_nameservers string $NET_DNS
d-i netcfg/no_default_route boolean true
d-i netcfg/confirm_static boolean true

d-i hw-detect/load_firmware boolean true

d-i mirror/country string manual
d-i mirror/http/hostname string mirrors.edge.kernel.org
d-i mirror/http/directory string /debian
d-i mirror/http/proxy string

d-i passwd/root-login boolean ture
d-i passwd/make-user boolean false
d-i passwd/root-password-crypted password $6$G1dLfirFvLFHUpq7$SNggocv9A9XjaG6nG1Cst/QPk74oDsFyS8ED/GjBotUsqafcbgpmJmCl1l7Y948V97W8jInPrPP5EmXJ3IfY//

d-i clock-setup/utc boolean true
d-i time/zone string US/Eastern
d-i clock-setup/ntp boolean false

d-i preseed/early_command string anna-install libcrypto1.1-udeb libpcre2-8-0-udeb libssl1.1-udeb libuuid1-udeb zlib1g-udeb wget-udeb kpartx-udeb btrfs-progs-udeb
d-i partman/early_command string [[ -n "\$(blkid -t TYPE='vfat' -o device)" ]] && umount "\$(blkid -t TYPE='vfat' -o device)"; \
debconf-set partman-auto/disk "\$(list-devices disk |head -n1)"; \
wget -qO- '$IMAGE_URL' | gunzip -dc | /bin/dd of=\$(list-devices disk |head -n1); \
${scaleScript} \
mkdir /mount \
$MOUNT_OPTIONS `ls ${SYS_DISK}* | tail -n1` /mount \
echo "[Match]" > /mount${NETWORKD_DIR}/eth0.network \
echo "Name=eth0" >> /mount${NETWORKD_DIR}/eth0.network \
echo >> /mount${NETWORKD_DIR}/eth0.network \
echo "[Network]" >> /mount${NETWORKD_DIR}/eth0.network \
echo "Address=$NET_IP/$NET_MASK_NUM" >> /mount${NETWORKD_DIR}/eth0.network \
echo "Gateway=$NET_GATEWAY" >> /mount${NETWORKD_DIR}/eth0.network \
for i in ${NET_DNS[@]}; do echo "DNS=$" >> /mount${NETWORKD_DIR}/eth0.network ; done \
echo >> /mount${NETWORKD_DIR}/eth0.network \
/sbin/reboot; \
umount /media || true; \
EOF

find . | cpio -H newc --create --verbose | gzip -9 > /tmp/initrd.img;

cp -f /tmp/initrd.img /boot/initrd-dd.img || sudo cp -f /tmp/initrd.img /boot/initrd-dd.img
cp -f /tmp/vmlinuz /boot/vmlinuz-dd || sudo cp -f /tmp/vmlinuz /boot/vmlinuz-dd

chown root:root $GRUBDIR/$GRUBFILE
chmod 444 $GRUBDIR/$GRUBFILE

sleep 3 && reboot || sudo reboot >/dev/null 2>&1
### END 23-preseed.sh ###

### BEGIN 20-loadcfg.sh ###
parse_cfg
### END 20-loadcfg.sh ###
